@using Abacus.DAL;
@using Abacus.Models;


@{
    ViewBag.Title = "Μεταβολές προσωπικού";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Μεταβολές προσωπικού</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
    <span style="margin:5px 5px 5px 10px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Εκτύπωση", "xMetabolesPrint", "Admin", null, new { @class = "btn btn-primary", style = "font-size:14px", target = "_blank" })</span>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid<PersonnelGridViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΜΗΤΡΩΟ).Width(16).Groupable(false);
            columns.Bound(c => c.ΕΠΩΝΥΜΟ).Width(40).Groupable(false);
            columns.Bound(c => c.ΟΝΟΜΑ).Width(30).Groupable(false);
            columns.ForeignKey(f => f.ΒΝΣ, (IEnumerable<ΣΥΣ_ΣΤΑΘΜΟΙ>)ViewData["stations"], "ΣΤΑΘΜΟΣ_ΚΩΔ", "ΕΠΩΝΥΜΙΑ").Width(30);
            columns.ForeignKey(f => f.ΠΡΟΣΩΠΙΚΟ_ΕΙΔΟΣ, (IEnumerable<ΣΥΣ_ΠΡΟΣΩΠΙΚΟ>)ViewData["person_types"], "PROSOPIKO_ID", "PROSOPIKO_TEXT").Width(25);
        })
        .Groupable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Selectable()
        .Filterable()
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(180))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(40)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.PERSONNEL_ID);
            model.Field(p => p.ΒΝΣ).DefaultValue(ViewData["defaultStation"]);
            model.Field(p => p.ΠΡΟΣΩΠΙΚΟ_ΕΙΔΟΣ).DefaultValue(1);
        })
        .Read(read => read.Action("Personnel_Read", "Admin"))
        )
        .Events(events => events.Change("change"))
        )
    </div>

<div class="body-content" style="margin:5px 30px 5px 30px;background-color:dimgray;padding:2px;min-height:38px">
    <span style="margin:2px;float:left;font-family:'Segoe UI';">
        <label style="font-size:13px;font-weight:bold;color:white">Σχολικό έτος : </label>
        @(Html.Kendo().DropDownList()
            .Name("ddlSchoolYear")
            .DataTextField("ΣΧΟΛΙΚΟ_ΕΤΟΣ")
            .DataValueField("SCHOOLYEAR_ID")
            .HtmlAttributes(new { style = "width:160px;font-size:13px;font-weight:bold" })
            .OptionLabel("Επιλογή...")
            .AutoBind(true)
            .Enable(true)
            .DataSource(source => { source.Read(read => { read.Action("GetSchoolYears", "Admin"); }).ServerFiltering(true); })
            .Events(e =>
            {
                e.Select("ddlselect");
            })
        )
    </span>
</div>

<div class="body-content" style="margin:5px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid<PersonnelMetaboliViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display: block;font-size:14px" })
        .Navigatable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(260))
        .Columns(columns =>
        {
            columns.Bound(c => c.ΗΜΝΙΑ_ΑΠΟ).Width(20).Groupable(false);
            columns.Bound(c => c.ΗΜΝΙΑ_ΕΩΣ).Width(20).Groupable(false);
            columns.ForeignKey(f => f.ΜΕΤΑΒΟΛΗ_ΕΙΔΟΣ, (IEnumerable<ΣΥΣ_ΜΕΤΑΒΟΛΕΣ>)ViewData["metaboles_types"], "METABOLI_ID", "METABOLI_TEXT").Width(62).EditorTemplateName("MetaboliTypeId");
            columns.Bound(c => c.ΗΜΕΡΕΣ).Width(12).Groupable(false).Filterable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(36);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(30)
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.ΜΕΤΑΒΟΛΗ_ΚΩΔ);
                model.Field(p => p.ΜΕΤΑΒΟΛΗ_ΕΙΔΟΣ).DefaultValue(0);
                model.Field(p => p.ΗΜΕΡΕΣ).Editable(false);
            })
            .Create(create => create.Action("Metaboli_Create", "Admin").Data("data"))
            .Read(read => read.Action("Metaboli_Read", "Admin").Data("data"))
            .Update(update => update.Action("Metaboli_Update", "Admin").Data("data"))
            .Destroy(destroy => destroy.Action("Metaboli_Destroy", "Admin"))
            .Events(events => events.Error("error_handler"))
        )
        )
    </div>

<script type="text/javascript">

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item.index());
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var GridRow = masterGrid.dataItem(masterGrid.select());

        if (GridRow && dataItem) {
            var syearID = dataItem.SCHOOLYEAR_ID;
            var personID = GridRow.PERSONNEL_ID;
            $("#Child").data("kendoGrid").dataSource.read({ schoolyearId: syearID, personId: personID });
        }
        else {
            $("#Child").data("kendoGrid").dataSource.read({ schoolyearId: 0, personId: 0 });
        }
    };


    function RefreshGrid(e) {
        var grid = $("#Child").data("kendoGrid");
        grid.dataSource.read();
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var personID = dataItem.PERSONNEL_ID;
        var syearID = $("#ddlSchoolYear").data("kendoDropDownList").value();
        
        if (personID && syearID) {
            $("#Child").data("kendoGrid").dataSource.read({ schoolyearId: syearID, personId: personID });
        }
        else {
            $("#Child").data("kendoGrid").dataSource.read({ schoolyearId: 0, personId: 0 });
        }

    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        var syearID = $("#ddlSchoolYear").data("kendoDropDownList").value();
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem && syearID) {
            return { schoolyearId: syearID, personId: dataItem.PERSONNEL_ID };
        }
        else {
            return { schoolyearId: 0, personId: 0 };
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>

