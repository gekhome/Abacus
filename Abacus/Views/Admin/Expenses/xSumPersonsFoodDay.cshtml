@using Abacus.DAL;
@using Abacus.Models;

@{
    ViewBag.Title = "Κοστολόγιο τροφείου";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
    .k-calendar {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 20px 5px 20px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Κοστολόγιο ημερήσιων δαπανών τροφείου</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
    <span style="margin:5px 5px 5px 10px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Εκτύπωση", "xSumCostFoodPrint", "Admin", new { @class = "btn btn-primary", style = "font-size:14px", target = "_blank" })</span>
</div>

<div class="body-content" style="margin:5px 20px 5px 20px;background-color:dimgray;padding:4px 4px 4px 4px">
    <label style="margin-left:5px;font-size:13px;font-weight:bold;color:white">ΒΝΣ : </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlstation")
        .DataTextField("ΕΠΩΝΥΜΙΑ")
        .DataValueField("ΣΤΑΘΜΟΣ_ΚΩΔ")
        .HtmlAttributes(new { style = "width:300px;font-size:13px;font-weight:bold" })
        .OptionLabel("Επιλογή σταθμού...")
        .AutoBind(false)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetStations", "Admin"); }).ServerFiltering(true); })
            .Events(e =>
            {
                e.Select("ddlselect");
            })
    )
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Από ημερομηνία : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker1")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange1");
        })
    )
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Έως ημερομηνία : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker2")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange2");
        })
    )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px;font-size:small">
        @(Html.Kendo().Grid<SumPersonsTrofeioViewModel>()
        .Name("Grid")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Groupable()
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Scrollable(scr => scr.Height(420))
        .Columns(columns =>
        {
            columns.Bound(c => c.ΕΠΩΝΥΜΙΑ).Width(30).Groupable(false).Filterable(false);
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(20);
            columns.Bound(c => c.ΠΑΙΔΙΑ).Width(10);
            columns.Bound(c => c.ΠΡΟΣΩΠΙΚΟ).Width(14);
            columns.Bound(c => c.ΑΤΟΜΑ).Width(10).Groupable(false);
            columns.Bound(c => c.ΚΟΣΤΟΣ_ΗΜΕΡΑ).Width(20).Groupable(false)
                .ClientFooterTemplate("Ολικό: #= kendo.toString(sum, '0.00 €') #")
                .ClientGroupFooterTemplate("Σύνολο: #= kendo.toString(sum, '0.00 €') #");
            columns.Bound(c => c.ΔΑΠΑΝΗ_ΗΜΕΡΑ).Width(20).Groupable(false)
                .ClientFooterTemplate("Ολικό: #= kendo.toString(sum, '0.00 €') #")
                .ClientGroupFooterTemplate("Σύνολο: #= kendo.toString(sum, '0.00 €') #");
            columns.Bound(c => c.ΥΠΟΛΟΙΠΟ).Width(20).Groupable(false)
                .ClientFooterTemplate("Ολικό: #= kendo.toString(sum, '0.00 €') #")
                .ClientGroupFooterTemplate("Σύνολο: #= kendo.toString(sum, '0.00 €') #");
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(60)
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.ROWID);
            })
            .Read(read => read.Action("SumPersonsFood_Read", "Admin").Data("data"))
            .Events(events => events.Error("error_handler"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΚΟΣΤΟΣ_ΗΜΕΡΑ).Sum();
                a.Add(p => p.ΔΑΠΑΝΗ_ΗΜΕΡΑ).Sum();
                a.Add(p => p.ΥΠΟΛΟΙΠΟ).Sum();
            })
        )
        )
</div>

<script id="grid-events" type="text/javascript">

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function ddlselect(e) {
        var stationID = 0;
        var dataItem = this.dataItem(e.item.index());
        if (dataItem) {
            stationID = dataItem.ΣΤΑΘΜΟΣ_ΚΩΔ;
        }
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate1 = datepicker1.value();
        var selectedDate2 = datepicker2.value();

        if (stationID && selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ stationId: stationID, theDate1: selectedDate1, theDate2: selectedDate2 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε σταθμό και ημερομηνίες για προβολή των δαπανών.")
        }
    };

    function dpchange1() {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate1 = this.value();
        var selectedDate2 = datepicker2.value();
        var stationID = $("#ddlstation").data("kendoDropDownList").value();

        if (stationID && selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ stationId: stationID, theDate1: selectedDate1, theDate2: selectedDate2 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε σταθμό και ημερομηνίες για προβολή των δαπανών.")
        }
    }

    function dpchange2() {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate2 = this.value();
        var selectedDate1 = datepicker1.value();
        var stationID = $("#ddlstation").data("kendoDropDownList").value();

        if (stationID && selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ stationId: stationID, theDate1: selectedDate1, theDate2: selectedDate2 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε σταθμό και ημερομηνίες για προβολή των δαπανών.")
        }
    }

    // this is used for fetching the data
    function data() {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var stationID = $("#ddlstation").data("kendoDropDownList").value();
        var selectedDate1 = datepicker1.value();
        var selectedDate2 = datepicker2.value();

        if (stationID && selectedDate1 && selectedDate2) {
            return {
                stationId: stationID,
                theDate1: selectedDate1,
                theDate2: selectedDate2
            }
        }
        else {
            return {
                stationId: 0,
                theDate1: null,
                theDate2: null
            }
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid(e);
        }
    }

</script>

