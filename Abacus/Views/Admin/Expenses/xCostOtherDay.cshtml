@using Abacus.DAL;
@using Abacus.Models;

@{
    ViewBag.Title = "Δαπάνες γενικές";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
    .k-calendar {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 20px 5px 20px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Ημερήσιες γενικές και έκτακτες δαπάνες</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrids()">Ανανέωση</button>
</div>


<div class="body-content" style="margin:5px 20px 5px 20px;font-size:14px;background-color:dimgray;padding:4px 4px 4px 4px">
    <label id="dayOfWeek" style="margin-left:5px;margin-right:10px;font-size:15px;font-weight:bold;color:white;font-family:'Segoe UI'"></label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:14px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange");
        })
    )

    <label style="margin-left:5px;font-size:14px;font-weight:bold;color:white">ΒΝΣ : </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlstation")
        .DataTextField("ΕΠΩΝΥΜΙΑ")
        .DataValueField("ΣΤΑΘΜΟΣ_ΚΩΔ")
        .HtmlAttributes(new { style = "width:300px;font-size:14px;font-weight:bold" })
        .OptionLabel("Επιλογή σταθμού...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetStations", "Admin"); }).ServerFiltering(true); })
        .Events(e =>
        {
            e.Select("ddlselect");
        })
    )
    <label id="info" style="margin-left:15px;margin-right:5px;font-size:14px;font-weight:normal;color:white;font-style:italic;font-family:'Segoe UI'">
        Στο πρώτο πλέγμα (1), καταχωρούνται οι τελικές τιμές ανά μονάδα (με το Φ.Π.Α. και όποια έκπτωση)

    </label>
</div>

<div class="body-content" style="margin:10px 20px 5px 20px;font-size:small">
    <label style="margin-top:0px;margin-bottom:5px;font-size:13px;font-weight:normal;color:black">(1) Γενικές δαπάνες</label>
        @(Html.Kendo().Grid<CostOtherViewModel>()
        .Name("Grid1")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Groupable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top).DisplayDeleteConfirmation(false))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(200))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΚΑΤΗΓΟΡΙΑ, (IEnumerable<ΠΡΟΙΟΝ_ΚΑΤΗΓΟΡΙΑ>)ViewData["other_categories"], "ΚΑΤΗΓΟΡΙΑ_ΚΩΔ", "ΚΑΤΗΓΟΡΙΑ").Width(40).EditorTemplateName("CategoryOtherId");
            columns.ForeignKey(f => f.ΠΡΟΙΟΝ, (IEnumerable<sqlPRODUCT_SELECTOR>)ViewData["products_units"], "ΠΡΟΙΟΝ_ΚΩΔ", "ΠΡΟΙΟΝ_ΜΟΝΑΔΑ").Width(80).EditorTemplateName("CategoryProductId");
            columns.Bound(c => c.ΠΟΣΟΤΗΤΑ).Width(15).Groupable(false).Filterable(false);
            columns.Bound(c => c.ΤΙΜΗ_ΜΟΝΑΔΑ).Width(15).Groupable(false).Filterable(false);
            columns.Bound(c => c.ΣΥΝΟΛΟ).Width(20).Groupable(false).Filterable(false)
                .ClientFooterTemplate("Ολικό: #= kendo.toString(sum, '0.00 €') #")
                .ClientGroupFooterTemplate("Σύνολο: #= kendo.toString(sum, '0.00 €') #");
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
        })
        .ToolBar(toolBar => toolBar.Create())
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΚΩΔΙΚΟΣ);
                model.Field(p => p.ΚΑΤΗΓΟΡΙΑ).DefaultValue(0);
                model.Field(p => p.ΠΡΟΙΟΝ).DefaultValue(0);
                model.Field(p => p.ΣΥΝΟΛΟ).Editable(false);
            })
            .Create(create => create.Action("CostOther_Create", "Admin").Data("data"))
            .Read(read => read.Action("CostOther_Read", "Admin").Data("data"))
            .Update(update => update.Action("CostOther_Update", "Admin").Data("data"))
            .Destroy(destroy => destroy.Action("CostOther_Destroy", "Admin"))
            .Events(events => events.Error("error_handler1"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΣΥΝΟΛΟ).Sum();
            })
        )
        )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px;font-size:small">
    <label style="margin-top:0px;margin-bottom:5px;font-size:13px;font-weight:normal;color:black">(2) Άλλες γενικές και έκτακτες δαπάνες</label>
    @(Html.Kendo().Grid<CostGeneralViewModel>()
        .Name("Grid2")
        .AutoBind(true)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top).DisplayDeleteConfirmation(false))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(200))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΚΑΤΗΓΟΡΙΑ, (IEnumerable<ΕΞΤΡΑ_ΚΑΤΗΓΟΡΙΑ>)ViewData["extra_categories"], "ΚΑΤΗΓΟΡΙΑ_ΚΩΔ", "ΚΑΤΗΓΟΡΙΑ").Width(45).EditorTemplateName("CategoryExtraId");
            columns.Bound(c => c.ΠΕΡΙΓΡΑΦΗ).Width(100).Groupable(false);
            columns.Bound(c => c.ΣΥΝΟΛΟ).Width(20).Groupable(false).Filterable(false)
                .ClientFooterTemplate("Γεν. σύν.: #= kendo.toString(sum, '0.00 €') #")
                .ClientGroupFooterTemplate("Σύνολο: #= kendo.toString(sum, '0.00 €') #");
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(36);
        })
        .ToolBar(toolBar => toolBar.Create())
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΚΩΔΙΚΟΣ);
                model.Field(p => p.ΚΑΤΗΓΟΡΙΑ).DefaultValue(0);
            })
            .Create(create => create.Action("CostGeneral_Create", "Admin").Data("data"))
            .Read(read => read.Action("CostGeneral_Read", "Admin").Data("data"))
            .Update(update => update.Action("CostGeneral_Update", "Admin").Data("data"))
            .Destroy(destroy => destroy.Action("CostGeneral_Destroy", "Admin"))
            .Events(events => events.Error("error_handler2"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΣΥΝΟΛΟ).Sum();
            })
        )
    )
</div>

<script id="checkbox-events" type="text/javascript">

    $(document).ready(function () {
        var curDate = new Date();
        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[curDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);
    });

</script>

<script id="grid-events" type="text/javascript">

    function filterProducts() {
        var stationID = $("#ddlstation").data("kendoDropDownList").value();
        var categoryID = $("#ΚΑΤΗΓΟΡΙΑ").data("kendoDropDownList").value();

        if (categoryID && stationID) {
            return { categoryId: categoryID, stationId: stationID };
        }
        else {
            return { categoryId: 0, stationId: 0 };
        }
    }

    function RefreshGrid1(e) {
        var grid1 = $("#Grid1").data("kendoGrid");
        grid1.dataSource.read();
    }

    function RefreshGrid2(e) {
        var grid2 = $("#Grid2").data("kendoGrid");
        grid2.dataSource.read();
    }

    function RefreshGrids(e) {
        var grid1 = $("#Grid1").data("kendoGrid");
        grid1.dataSource.read();
        var grid2 = $("#Grid2").data("kendoGrid");
        grid2.dataSource.read();
    }

    function dpchange() {
        var selectedDate = this.value();

        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[selectedDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);

        var stationID = $("#ddlstation").data("kendoDropDownList").value();
        if (stationID) {
            $("#Grid1").data("kendoGrid").dataSource.read({ stationId: stationID, theDate: selectedDate });
            $("#Grid2").data("kendoGrid").dataSource.read({ stationId: stationID, theDate: selectedDate });
        }
    }

    function ddlselect(e) {
        var stationID = 0;
        var dataItem = this.dataItem(e.item.index());
        if (dataItem) {
            stationID = dataItem.ΣΤΑΘΜΟΣ_ΚΩΔ;
        }
        var datepicker = $("#datepicker").data("kendoDatePicker");
        var selectedDate = datepicker.value();

        if (stationID && selectedDate) {
            $("#Grid1").data("kendoGrid").dataSource.read({ stationId: stationID, theDate: selectedDate });
            $("#Grid2").data("kendoGrid").dataSource.read({ stationId: stationID, theDate: selectedDate });
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε σταθμό και ημερομηνία για επεξεργασία των δαπανών.")
        }
    };

    function data() {
        var datepicker = $("#datepicker").data("kendoDatePicker");
        var stationID = $("#ddlstation").data("kendoDropDownList").value();
        var selectedDate = datepicker.value();

        if (stationID && selectedDate) {
            return {
                stationId: stationID,
                theDate: selectedDate,
            }
        }
        else {
            return {
                stationId: 0,
                theDate: null
            }
        }
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid1(e);
        }
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid2(e);
        }
    }

</script>

