@using Abacus.DAL;
@using Abacus.Models;

@{
    ViewBag.Title = "Παρουσίες βρεφονηπίων";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Παρουσίες βρεφονηπίων</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid<sqlTmimaInfoViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.SCHOOLYEAR_ID, (IEnumerable<ΣΥΣ_ΣΧΟΛΙΚΑ_ΕΤΗ>)ViewData["schoolYears"], "SCHOOLYEAR_ID", "ΣΧΟΛΙΚΟ_ΕΤΟΣ").Width(20);
            columns.Bound(c => c.ΒΝΣ_ΟΝΟΜΑ).Width(30).Groupable(false);
            columns.Bound(c => c.ΤΜΗΜΑ_ΟΝΟΜΑ).Width(30).Groupable(false);
            columns.Bound(c => c.ΠΕΡΙΦΕΡΕΙΑΚΗ).Width(40);
        })
            .Groupable()
            .Navigatable()
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(10))
            .Selectable()
            .Filterable()
            .HtmlAttributes(new { style = "display: block;font-size:11px" })
            .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
            .Scrollable(scr => scr.Height(180))
            .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(60)
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.ΤΜΗΜΑ_ΚΩΔ);
            })
            .Read(read => read.Action("Tmimata_Read", "Admin"))
            )
            .Events(events => events.Change("change"))
        )
    </div>

<div class="body-content" style="margin:5px 30px 5px 30px;font-size:14px;background-color:dimgray;padding:4px 4px 4px 4px">
    <label id="dayOfWeek" style="margin-left:5px;margin-right:5px;font-size:15px;font-weight:bold;color:white;font-family:'Segoe UI'"></label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker")
        .Value(DateTime.Today)
        .Enable(false)
        .HtmlAttributes(new { style = "width:120px;font-size:14px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange");
        })
    )

    <span style="margin-right:5px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="loadChildren()" value="Φόρτωση παιδιών τμήματος" class="btn btn-default" title="Φόρτωση λίστας με τα παιδιά του επιλεγμένου τμήματος" />
    </span>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
    @(Html.Kendo().Grid<ChildParousiaViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Top).DisplayDeleteConfirmation(false))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(280))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.CHILD_ID, (IEnumerable<sqlCHILD_TMIMA_SELECTOR>)ViewData["children"], "CHILD_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40).EditorTemplateName("AdminChildId");
            columns.Bound(f => f.PRESENCE).Width(10).Filterable(false).ClientTemplate("<input type='checkbox' #= PRESENCE ? checked='checked':'' # class='chkbx' />");
            columns.Command(command => { command.Destroy(); }).Width(16);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
            toolBar.Save();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(true)
            .PageSize(40)
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.PAROUSIA_ID);
                model.Field(p => p.PRESENCE).DefaultValue(true);
                model.Field(p => p.CHILD_ID).DefaultValue((int)ViewData["defaultChild"]);
            })
            .Create(create => create.Action("Parousies_Create", "Admin").Data("data"))
            .Read(read => read.Action("Parousies_Read", "Admin").Data("data"))
            .Update(update => update.Action("Parousies_Update", "Admin").Data("data"))
            .Destroy(destroy => destroy.Action("Parousies_Destroy", "Admin"))
            .Events(events => events.Error("error_handler"))
        )
    )
</div>

<script id="checkbox-events" type="text/javascript">

    $(document).ready(function () {
        var curDate = new Date();
        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[curDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);
    });

    // Date: 16-11-2018
    // Listener for the state of the three checkboxes (Π1, Π2, Π3).
    // Required, otherwise changes do not take effect in batch mode of the grid.
    // THIS IS IT! It works for any number of checkbox columns. All other solutions fail!
    // in batch editing mode of the grid.
    // Solution link: https://stackoverflow.com/questions/17889049/adding-bindeable-checkbox-column-to-grid
    $(function () {
        $('#Child').on('click', '.chkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#Child').data().kendoGrid;

            grid.closeCell();
            var dataItem = grid.dataItem($(this).closest('tr'));
            var col = $(this).closest('td');

            grid.editCell(col);
            dataItem.set(grid.columns[col.index()].field, checked);
            grid.closeCell(col);
        });
    });

    function loadChildren() {
        var datepicker = $("#datepicker").data("kendoDatePicker");
        var selectedDate = datepicker.value();

        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var tmimaID = dataItem.ΤΜΗΜΑ_ΚΩΔ;

        if (!tmimaID || !selectedDate) {
            MessageBoxAlert("Πρέπει πρώτα να επιλέξετε ένα τμήμα και ημερομηνία.", "Σφάλμα");
            return;
        }
        var message = "Να γίνει η φόρτωση των παιδιών του επιλεγμένου τμήματος;"
        var params = {
            tmimaId: tmimaID,
            theDate: selectedDate
        };

        //MessageBoxConfirm(message, "Φόρτωση παιδιών").done(function () {
            $.ajax({
                url: '@Url.Action("LoadTmimaChildren", "Admin")',
                type: 'POST',
                data: JSON.stringify(params),
                contentType: 'application/json; charset=utf-8',
                success: function (outcome) {
                    if (outcome) MessageBoxAlert(outcome, "Μήνυμα");
                    RefreshGrid();
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.", "Σφάλμα");
                }
            });
        //}).fail(function () {
        //    return;
        //});
    }

</script>

<script id="grid-events" type="text/javascript">

    function filterChildren() {
        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var tmimaID = 0;
        if (dataItem) {
            tmimaID = dataItem.ΤΜΗΜΑ_ΚΩΔ;
        }
        return { tmimaId: tmimaID };
    }

    function RefreshGrid(e) {
        var grid = $("#Child").data("kendoGrid");
        grid.dataSource.read();
    }

    function dpchange() {
        var selectedDate = this.value();

        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[selectedDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);

        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var tmimaID = dataItem.ΤΜΗΜΑ_ΚΩΔ;

        $("#Child").data("kendoGrid").dataSource.read({ tmimaId: tmimaID, theDate: selectedDate });
        $("#Child").css("display", "block");

    }

    function change(e) {
        var datepicker = $("#datepicker").data("kendoDatePicker");

        datepicker.enable();
        var selectedDate = datepicker.value();

        var dataItem = this.dataItem(this.select());
        var tmimaID = dataItem.ΤΜΗΜΑ_ΚΩΔ;

        $("#Child").data("kendoGrid").dataSource.read({ tmimaId: tmimaID, theDate: selectedDate });
        $("#Child").css("display", "block");
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        var datepicker = $("#datepicker").data("kendoDatePicker");
        selectedDate = datepicker.value();

        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        var tmimaID = dataItem.ΤΜΗΜΑ_ΚΩΔ;

        return {
            tmimaId: tmimaID,
            theDate: selectedDate
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid(e);
        }
    }

</script>

