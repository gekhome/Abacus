@using Abacus.DAL;
@using Abacus.Models;


@{
    ViewBag.Title = "Διαβιβαστικά ωρολόγιου";
    Layout = "~/Views/Shared/_StationLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Διαβιβαστικά ωρολόγιου προγράμματος</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Station", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;background-color:dimgray;padding:2px;min-height:38px">
    <span style="margin:2px;float:right;font-family:'Segoe UI';">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="printOrologio()" value="Εκτύπωση συνημμένου" class="btn btn-default" />
    </span>
    <span style="margin:2px;float:right;font-family:'Segoe UI';">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="printDocument()" value="Εκτύπωση διαβιβαστικού" class="btn btn-default" />
    </span>

    <span style="margin:2px;float:left;font-family:'Segoe UI';">
        <label style="font-size:13px;font-weight:bold;color:white">Σχολικό έτος : </label>
        @(Html.Kendo().DropDownList()
            .Name("ddlSchoolYear")
            .DataTextField("ΣΧΟΛΙΚΟ_ΕΤΟΣ")
            .DataValueField("SCHOOLYEAR_ID")
            .HtmlAttributes(new { style = "width:160px;font-size:13px;font-weight:bold" })
            .OptionLabel("Επιλογή...")
            .AutoBind(true)
            .Enable(true)
            .DataSource(source => { source.Read(read => { read.Action("GetSchoolYears", "Document"); }).ServerFiltering(true); })
            .Events(e =>
            {
                e.Select("ddlselect");
            })
        )
    </span>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid<DocProgrammaViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ADMIN_ID, (IEnumerable<ΕΓΓΡΑΦΟ_ΔΙΑΧΕΙΡΙΣΤΗΣ>)ViewData["operators"], "DOCADMIN_ID", "DOCADMIN_NAME").Width(40);
            columns.ForeignKey(f => f.DOC_YEAR, (IEnumerable<ΣΥΣ_ΕΤΗ>)ViewData["years"], "ΕΤΟΣ", "ΕΤΟΣ").Width(15);
            columns.ForeignKey(f => f.DOC_MONTH, (IEnumerable<ΣΥΣ_ΜΗΝΕΣ>)ViewData["months"], "ΜΗΝΑΣ_ΚΩΔ", "ΜΗΝΑΣ").Width(20);
            columns.Bound(c => c.DOC_DATE).Width(20).Groupable(false);
            columns.Bound(c => c.DOC_PROTOCOL).Width(15).Groupable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("DocOrologioEdit", "Document") + "?docId=#=DOC_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Καρτέλα</a>"
            ).Width(15);

        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Groupable()
        .Selectable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Navigatable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Filterable()
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(360))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(60)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.DOC_ID);
            model.Field(p => p.ADMIN_ID).DefaultValue(ViewData["defaultOperator"]);
            model.Field(p => p.DOC_YEAR).DefaultValue(1);
            model.Field(p => p.DOC_MONTH).DefaultValue(1);
        })
        .Create(create => create.Action("DocOrologio_Create", "Document").Data("data1"))
        .Read(read => read.Action("DocOrologio_Read", "Document").Data("data1"))
        .Update(update => update.Action("DocOrologio_Update", "Document").Data("data1"))
        .Destroy(destroy => destroy.Action("DocOrologio_Destroy", "Document"))
        .Events(events => events.Error("error_handler"))
        )
        )
</div>

<script type="text/javascript">

    function printOrologio() {

        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            var stationID = dataItem.STATION_ID;
            var yearID = dataItem.DOC_YEAR;
            var monthID = dataItem.DOC_MONTH;

            window.open('@Url.Action("srepOrologioPrint", "Document")?stationId=' + stationID + '&yearId=' + yearID + '&monthId=' + monthID);
        }
        else {
            MessageBoxAlert("Για να γίνει η εκτύπωση του συνημμένου ωρολόγιου προγράμματος πρέπει πρώτα να επιλέξετε διαβιβαστικό.");
        }
    }

    function printDocument() {

        var masterGrid = $("#Master").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            var docID = dataItem.DOC_ID;

            window.open('@Url.Action("DocOrologioPrint", "Document")?docId=' + docID);
        }
        else {
            MessageBoxAlert("Για να γίνει η εκτύπωση του διαβιβαστικού πρέπει πρώτα να το επιλέξετε στο πλέγμα.");
        }
    }

</script>


<script type="text/javascript">

    function data1() {
        var syearID = $("#ddlSchoolYear").data("kendoDropDownList").value();
        if (syearID) {
            return { schoolyearId: syearID }
        }
        else {
            return { schoolyearId: 0 }
        }
    }

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item.index());
        if (dataItem) {
            var syearID = dataItem.SCHOOLYEAR_ID;
            $("#Master").data("kendoGrid").dataSource.read({ schoolyearId: syearID });
        }
        else {
            $("#Master").data("kendoGrid").dataSource.read({ schoolyearId: 0 });
        }
    };

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Master").data("kendoGrid").dataSource.read();
    }

</script>

