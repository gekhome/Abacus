@using Abacus.DAL;
@using Abacus.Models;


@{
    ViewBag.Title = "Ωρολόγιο πρόγραμμα";
    Layout = "~/Views/Shared/_StationLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
    .k-calendar {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 20px 10px 20px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Ωρολόγιο πρόγραμμα προσωπικού</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "School", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
</div>

<div class="body-content" style="margin:5px 20px 5px 20px;font-size:14px;background-color:dimgray;padding:4px 4px 4px 4px;">
    <span style="margin-left:10px;float:left;font-family:'Segoe UI';">
        <label style="font-size:14px;font-weight:bold;color:white">Σχολικό έτος : </label>
        @(Html.Kendo().DropDownList()
            .Name("ddlschoolyear")
            .DataTextField("ΣΧΟΛΙΚΟ_ΕΤΟΣ")
            .DataValueField("SCHOOLYEAR_ID")
            .HtmlAttributes(new { style = "width:140px;font-size:14px;font-weight:bold" })
            .OptionLabel("Επιλογή...")
            .AutoBind(true)
            .Enable(true)
            .DataSource(source => { source.Read(read => { read.Action("GetSchoolYears", "Station"); }).ServerFiltering(true); })
        )
    </span>
    <label id="dayOfWeek" style="margin-left:10px;margin-right:5px;font-size:15px;font-weight:bold;color:white;font-family:'Segoe UI'"></label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:14px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange");
        })
    )

    <span style="margin-right:2px;margin-left:5px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="transferWeek()" value="Αντιγραφή εβδομάδας" class="btn btn-default" title="Αντιγραφή τελευταίας καταχωρημένης εβδομάδας στην αμέσως επόμενη" />
    </span>
    <span style="margin-right:0px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="transferDay()" value="Αντιγραφή ημέρας" class="btn btn-default" title="Αντιγραφή της επιλεγμένης ημέρας στην αμέσως επόμενη διαθέσιμη ημέρα" />
    </span>
    <span style="margin-right:5px;float:right;font-family:'Segoe UI'">
        <input style="font-family:'Segoe UI';font-size:12px" type="button" onclick="loadPersonnel()" value="Φόρτωση προσωπικού" class="btn btn-default" title="Φόρτωση λίστας εργαζομένων από το μητρώο του σταθμού"/>
    </span>
</div>

<div class="body-content" style="margin:10px 20px 5px 20px;font-size:small">
        @(Html.Kendo().Grid<ProgrammaDayViewModel>()
        .Name("Grid")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Top).DisplayDeleteConfirmation(false))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(380))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.PERSON_ID, (IEnumerable<sqlPERSONNEL_SELECTOR>)ViewData["persons"], "PERSONNEL_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40);
            columns.ForeignKey(f => f.HOUR_START, (IEnumerable<ΣΥΣ_ΩΡΕΣ>)ViewData["hours"], "HOUR_ID", "HOUR_TEXT").Width(20);
            columns.ForeignKey(f => f.HOUR_END, (IEnumerable<ΣΥΣ_ΩΡΕΣ>)ViewData["hours"], "HOUR_ID", "HOUR_TEXT").Width(20);
            columns.Command(command => { command.Destroy(); }).Width(15);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
            toolBar.Save();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(true)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.PROGRAMMA_ID);
                model.Field(p => p.HOUR_START).DefaultValue(ViewData["hourFirst"]);
                model.Field(p => p.HOUR_END).DefaultValue(ViewData["hourLast"]);        
                model.Field(p => p.PERSON_ID).DefaultValue((int)ViewData["defaultPerson"]);
            })
            .Create(create => create.Action("Programma_Create", "Station").Data("data"))
            .Read(read => read.Action("Programma_Read", "Station").Data("data"))
            .Update(update => update.Action("Programma_Update", "Station").Data("data"))
            .Destroy(destroy => destroy.Action("Programma_Destroy", "Station"))
            .Events(events => events.Error("error_handler"))
        )
        )
</div>

<script id="checkbox-events" type="text/javascript">

    $(document).ready(function () {
        var curDate = new Date();
        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[curDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);
    });

</script>

<script id="automation" type ="text/javascript">

    function transferDay() {
        var selectedDate = null;
        var syearID = 0;

        var datepicker = $("#datepicker").data("kendoDatePicker");
        syearID = $("#ddlschoolyear").data("kendoDropDownList").value();
        selectedDate = datepicker.value();

        if (!selectedDate || !syearID) {
            MessageBoxAlert("Πρέπει να επιλέξετε σχολικό έτος και ημερομηνία.", "Μήνυμα");
            return;
        }
        var params = {
            stationId: 0,
            theDate: selectedDate,
            syearId: syearID
        };

        var someDate = new Date(selectedDate);
        var numberOfDaysToAdd = +1;
        someDate.setDate(someDate.getDate() + numberOfDaysToAdd);

        var dayIndex = someDate.getDay();
        if (dayIndex == 6) {
            numberOfDaysToAdd = 2;
            someDate.setDate(someDate.getDate() + numberOfDaysToAdd);
        }
        else if (dayIndex == 0) {
            numberOfDaysToAdd = 1;
            someDate.setDate(someDate.getDate() + numberOfDaysToAdd);
        }
        var date = someDate.getDate() + '/' + (someDate.getMonth() + 1) + '/' + someDate.getFullYear();

        var text = "Η λειτουργία αυτή μεταφέρει το πρόγραμμα της επιλεγμένης ημέρας στην αμέσως επόμενη διαθέσιμη ημέρα.<br/>";
        text += "Να γίνει αντιγραφή του προγράμματος στην ημέρα " + date.toString() + ";";

        MessageBoxConfirm(text, "Μεταφορά ημέρας").done(function () {
            $.ajax({
                url: '@Url.Action("TransferDay", "Station")',
                type: 'POST',
                data: JSON.stringify(params),
                contentType: 'application/json; charset=utf-8',
                success: function (out) {
                    if (out) MessageBoxAlert(out, "Μήνυμα");
                    RefreshGrid();
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.", "Σφάλμα");
                }
            });
        }).fail(function () {
            return;
        });
    }

    function transferWeek() {
        var selectedDate = null;
        var syearID = 0;

        var datepicker = $("#datepicker").data("kendoDatePicker");
        syearID = $("#ddlschoolyear").data("kendoDropDownList").value();
        selectedDate = datepicker.value();

        if (!selectedDate || !syearID) {
            MessageBoxAlert("Πρέπει να επιλέξετε σχολικό έτος και ημερομηνία.", "Μήνυμα");
            return;
        }
        var params = {
            stationId: 0,
            theDate: selectedDate,
            syearId: syearID
        };

        var message = "Να γίνει η μεταφορά του προγράμματος της τελευταίας καταχωρημένης εβδομάδας στην αμέσως επόμενη;"

        MessageBoxConfirm(message, "Μεταφορά εβδομάδας").done(function () {
            $.ajax({
                url: '@Url.Action("TransferWeek", "Station")',
                type: 'POST',
                data: JSON.stringify(params),
                contentType: 'application/json; charset=utf-8',
                success: function (out) {
                    if (out) MessageBoxAlert(out, "Μήνυμα");
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.", "Σφάλμα");
                }
            });
        }).fail(function () {
            return;
        });
    }

    function loadPersonnel() {
        var selectedDate = null;
        var syearID = 0;

        var datepicker = $("#datepicker").data("kendoDatePicker");
        syearID = $("#ddlschoolyear").data("kendoDropDownList").value();
        selectedDate = datepicker.value();

        if (!selectedDate || !syearID) {
            MessageBoxAlert("Πρέπει να επιλέξετε σχολικό έτος και ημερομηνία.", "Μήνυμα");
            return;
        }
        var message = "Να γίνει η φόρτωση του προσωπικού του ΒΝΣ; Θα χρειαστεί να προσαρμόσετε τις ώρες προσέλευσης, αποχώρησης."
        var params = {
            stationId: 0,
            theDate: selectedDate,
            syearid: syearID
        };

        MessageBoxConfirm(message, "Φόρτωση προσωπικού").done(function () {
            $.ajax({
                url: '@Url.Action("LoadStationPersonnel", "Station")',
                type: 'POST',
                data: JSON.stringify(params),
                contentType: 'application/json; charset=utf-8',
                success: function (outcome) {
                    if (outcome) MessageBoxAlert(outcome, "Μήνυμα");
                    RefreshGrid();
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.", "Σφάλμα");
                }
            });
        }).fail(function () {
            return;
        });

    }

</script>

<script id="grid-events" type="text/javascript">

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function dpchange() {
        var selectedDate = this.value();
        var syearID = $("#ddlschoolyear").data("kendoDropDownList").value();

        var weekday = ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"];
        var dayName = weekday[selectedDate.getDay()];

        $("#dayOfWeek").text(dayName).attr('title', dayName);

        $("#Grid").data("kendoGrid").dataSource.read({ theDate: selectedDate, syearId: syearID });
        $("#Grid").css("display", "block");
    }

    function data() {
        var datepicker = $("#datepicker").data("kendoDatePicker");
        var selectedDate = datepicker.value();
        var syearID = $("#ddlschoolyear").data("kendoDropDownList").value();

        if (syearID && selectedDate) {
            return { theDate: selectedDate, syearId: syearID }
        }
        else {
            return { theDate: null, syearId: 0 }
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid(e);
        }
    }

</script>

