@using Abacus.DAL;
@using Abacus.Models;

@{
    ViewBag.Title = "Διαιτολόγια ημέρας";
    Layout = "~/Views/Shared/_StationLayout.cshtml";
}

@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
        <span style="margin:5px 30px 5px 0px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
            <font style="color:#494949;font-family:'Segoe UI'">Ημερήσια διαιτολόγια</font>
        </span>
        <span style="margin:5px 10px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Station", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
        <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
        <button class="btn btn-primary" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="printMealPlanData()">Εκτύπωση διαιτολ. και δαπάνης</button>
    </div>

<div class="body-content" style="margin:10px 20px 5px 20px">
        @(Html.Kendo().Grid<DiaitologioViewModel>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(20).Filterable(false).Groupable(false);
            columns.ForeignKey(f => f.ΓΕΥΜΑ_ΠΡΩΙ, (IEnumerable<ΓΕΥΜΑΤΑ_ΠΡΩΙ>)ViewData["meals_morning"], "ΠΡΩΙΝΟ_ΚΩΔ", "ΠΡΩΙΝΟ").Width(40).EditorTemplateName("MealMorningId2");
            columns.ForeignKey(f => f.ΓΕΥΜΑ_ΜΕΣΗΜΕΡΙ, (IEnumerable<ΓΕΥΜΑΤΑ_ΜΕΣΗΜΕΡΙ>)ViewData["meals_noon"], "ΜΕΣΗΜΕΡΙΑΝΟ_ΚΩΔ", "ΜΕΣΗΜΕΡΙΑΝΟ").Width(80).EditorTemplateName("MealNoonId2");
            columns.ForeignKey(f => f.ΓΕΥΜΑ_ΒΡΕΦΗ, (IEnumerable<ΓΕΥΜΑΤΑ_ΒΡΕΦΗ>)ViewData["meals_baby"], "ΒΡΕΦΙΚΟ_ΚΩΔ", "ΒΡΕΦΙΚΟ").Width(40).EditorTemplateName("MealBabyId2");
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(40);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Editable(edit => edit.Mode(GridEditMode.PopUp).Window(w => w.Width(680).Title("Επεξεργασία διαιτολόγιου")).TemplateName("MealPlanForm2"))
        .HtmlAttributes(new { style = "font-size:11px" })
        .Events(e => e.Edit("onEdited"))
        .Navigatable()
        .Selectable()
        .Filterable()
        .Groupable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(340))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.ΔΙΑΙΤΟΛΟΓΙΟ_ΚΩΔ);
            model.Field(p => p.ΓΕΥΜΑ_ΠΡΩΙ).DefaultValue(0);
            model.Field(p => p.ΓΕΥΜΑ_ΜΕΣΗΜΕΡΙ).DefaultValue(0);
            model.Field(p => p.ΓΕΥΜΑ_ΒΡΕΦΗ).DefaultValue(0);
        })
        .Create(create => create.Action("MealPlan_Create", "Station"))
        .Read(read => read.Action("MealPlan_Read", "Station"))
        .Update(update => update.Action("MealPlan_Update", "Station"))
        .Destroy(destroy => destroy.Action("MealPlan_Destroy", "Station"))
        .Events(events => events.Error("error_handler"))
        ) @* datasource*@
        .Events(events => events.Change("change"))
        )
</div>

<div class="body-content" style="margin:10px 20px 5px 20px;font-size:small">
    @(Html.Kendo().Grid<SumPersonsTrofeioViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px;font-weight:bold" })
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(50))
        .Columns(columns =>
        {
            columns.Bound(c => c.ΕΠΩΝΥΜΙΑ).Width(30).Filterable(false);
            columns.Bound(c => c.ΗΜΕΡΟΜΗΝΙΑ).Width(20);
            columns.Bound(c => c.ΠΑΙΔΙΑ).Width(10);
            columns.Bound(c => c.ΠΡΟΣΩΠΙΚΟ).Width(14);
            columns.Bound(c => c.ΑΤΟΜΑ).Width(10);
            columns.Bound(c => c.ΚΟΣΤΟΣ_ΗΜΕΡΑ).Width(20);
            columns.Bound(c => c.ΔΑΠΑΝΗ_ΗΜΕΡΑ).Width(20);
            columns.Bound(c => c.ΥΠΟΛΟΙΠΟ).Width(20);
        })
        .DataSource(ds => ds
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ROWID);
            })
            .Read(read => read.Action("SumPersonsFood_Get", "Station").Data("data"))
            .Events(events => events.Error("error_handler"))
        )
    )
</div>


<script type="text/javascript">

    function printMealPlanData() {
        var masterGrid = $("#Grid").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());

        if (dataItem) {
            var selectedDate = dataItem.ΗΜΕΡΟΜΗΝΙΑ;
            window.open('@Url.Action("DiaitologioDayPrint", "Station")?theDate=' + kendo.toString(selectedDate, 'dd/MM/yyyy'));
        }
        else {
            MessageBoxAlert("Για να γίνει η εκτύπωση πρέπει να επιλέξετε ένα διαιτολόγιο ημέρας από το πλέγμα.");
        }
    }

    function onEdited(e) {
        e.container.data().kendoWindow.bind("deactivate", function () { RefreshGrid(e); });
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var selectedDate = dataItem.ΗΜΕΡΟΜΗΝΙΑ;

        if (selectedDate) {
            $("#Child").data("kendoGrid").dataSource.read({ theDate: selectedDate });
        }
    }

    function data() {
        var masterGrid = $("#Grid").data("kendoGrid");
        // get data item for selected row
        var selectedDate = null;
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            selectedDate = dataItem.ΗΜΕΡΟΜΗΝΙΑ;
        }
        if (selectedDate) {
            return {
                theDate: selectedDate
            }
        }
        else {
            return {
                theDate: null
            }
        }
    }


    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Grid").data("kendoGrid").dataSource.read();
    }

</script>
