@using Abacus.DAL;
@using Abacus.Models;


@{
    ViewBag.Title = "Έλεγχος προγράμματος";
    Layout = "~/Views/Shared/_StationLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
    .k-calendar {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 20px 5px 20px">
    <span style="margin:5px 20px 5px 20px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Έλεγχος και επεξεργασία ωρολόγιου προγράμματος</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Station", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:5px 20px 5px 20px;background-color:dimgray;padding:4px 4px 4px 4px">
    <span style="margin-left:10px;float:left;font-family:'Segoe UI';">
        <label style="font-size:14px;font-weight:bold;color:white">Σχολικό έτος : </label>
        @(Html.Kendo().DropDownList()
            .Name("ddlschoolyear")
            .DataTextField("ΣΧΟΛΙΚΟ_ΕΤΟΣ")
            .DataValueField("SCHOOLYEAR_ID")
            .HtmlAttributes(new { style = "width:140px;font-size:14px;font-weight:bold" })
            .OptionLabel("Επιλογή...")
            .AutoBind(true)
            .Enable(true)
            .DataSource(source => { source.Read(read => { read.Action("GetSchoolYears", "Station"); }).ServerFiltering(true); })
        )
    </span>
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Από ημερομηνία : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker1")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange1");
        })
    )
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Έως ημερομηνία : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker2")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
        .Events(e =>
        {
            e.Change("dpchange2");
        })
    )
</div>

<div class="body-content" style="margin:5px 20px 5px 20px">

        @(Html.Kendo().Grid<ProgrammaDayViewModel>()
        .Name("Grid")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display:block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(360))
        .Columns(columns =>
        {
            columns.Bound(f => f.PROGRAMMA_DATE).Width(16);
            columns.ForeignKey(f => f.PERSON_ID, (IEnumerable<sqlPERSONNEL_SELECTOR>)ViewData["persons"], "PERSONNEL_ID", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40);
            columns.ForeignKey(f => f.HOUR_START, (IEnumerable<ΣΥΣ_ΩΡΕΣ>)ViewData["hours"], "HOUR_ID", "HOUR_TEXT").Width(20);
            columns.ForeignKey(f => f.HOUR_END, (IEnumerable<ΣΥΣ_ΩΡΕΣ>)ViewData["hours"], "HOUR_ID", "HOUR_TEXT").Width(20);
            columns.Command(command => { command.Destroy(); }).Width(20);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
            toolBar.Save();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(true)
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.PROGRAMMA_ID);
                model.Field(p => p.HOUR_START).DefaultValue(ViewData["hourFirst"]);
                model.Field(p => p.HOUR_END).DefaultValue(ViewData["hourLast"]);
                model.Field(p => p.PERSON_ID).DefaultValue((int)ViewData["defaultPerson"]);
            })
            .Create(create => create.Action("Programma2_Create", "Station").Data("data"))
            .Read(read => read.Action("Programma2_Read", "Station").Data("data"))
            .Update(update => update.Action("Programma2_Update", "Station").Data("data"))
            .Destroy(destroy => destroy.Action("Programma2_Destroy", "Station"))
            .Events(events => events.Error("error_handler"))
            )
        )

</div>

<div class="body-content" style="margin:10px 20px 5px 20px;background-color:dimgray;padding:4px 4px 4px 4px;min-height:38px">
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Διαγραφή προγράμματος - Από : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker3")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
    )
    <label style="margin-left:10px;font-size:13px;font-weight:bold;color:white">Έως : </label>
    @(Html.Kendo().DatePicker()
        .Name("datepicker4")
        .Value(DateTime.Today)
        .Enable(true)
        .HtmlAttributes(new { style = "width:120px;font-size:13px;font-weight:bold", type = "text" })
    )
    <span style="margin-right:5px;margin-left:5px;margin-bottom:2px;float:right;font-family:'Segoe UI';">
        <input style="font-family:'Segoe UI';font-weight:bold;font-size:12px" type="button" onclick="deleteProgramma()" value="Διαγραφή" class="btn btn-default" />
    </span>
    <div id="divLoading" style="margin:0px 10px 0px 0px;float:right;font-family:'Segoe UI';z-index: 30001;display:none">
        <p id="message-icon" style="margin-left:5px;font-size:13px;color:#ffffff">
            Διαγραφή σε εξέλιξη...<img id="ajax-icon" src="~/Images/other/progress4.gif" style="margin-left:5px;width:36px;height:36px">
        </p>
    </div>
</div>

<script type="text/javascript">

    function deleteProgramma() {
        var datepicker3 = $("#datepicker3").data("kendoDatePicker");
        var datepicker4 = $("#datepicker4").data("kendoDatePicker");
        var selectedDate3 = datepicker3.value();
        var selectedDate4 = datepicker4.value();

        var sDate1 = selectedDate3.getDate() + '/' + (selectedDate3.getMonth() + 1) + '/' + selectedDate3.getFullYear();
        var sDate2 = selectedDate4.getDate() + '/' + (selectedDate4.getMonth() + 1) + '/' + selectedDate4.getFullYear();

        if (selectedDate3 && selectedDate4) {
            if (selectedDate3 <= selectedDate4) {
                MessageBoxConfirm("Να γίνει η διαγραφή του προγράμματος μεταξύ των επιλεγμένων ημερομηνιών;").done(function () {
                    $('#divLoading').show();
                    $.ajax({
                        url: '@Url.Action("DeleteProgramma", "Station")?theDate1=' + sDate1 + '&theDate2=' + sDate2,
                        type: 'GET',
                        data: "",
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            $('#divLoading').hide();
                            if (data != "") MessageBoxAlert(data);
                            RefreshGrid();
                        },
                        error: function () {
                            $('#divLoading').hide();
                            MessageBoxAlert("Προέκυψε σφάλμα ανάκτησης δεδομένων.");
                        }
                    });
                }).fail(function () {
                    return;
                });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε ημερομηνίες για διαγραφή μέρους του προγράμματος.")
        }
    }

    function ddlselect(e) {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate1 = datepicker1.value();
        var selectedDate2 = datepicker2.value();

        if (selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ theDate1: selectedDate1, theDate2: selectedDate2, syearId: 0 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε ημερομηνίες για προβολή του προγράμματος.")
        }
    };

    function dpchange1() {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate1 = this.value();
        var selectedDate2 = datepicker2.value();

        if (selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ theDate1: selectedDate1, theDate2: selectedDate2, syearId: 0 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε ημερομηνίες για προβολή του προγράμματος.")
        }
    }

    function dpchange2() {
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");
        var selectedDate2 = this.value();
        var selectedDate1 = datepicker1.value();

        if (selectedDate1 && selectedDate2) {
            if (selectedDate1 <= selectedDate2) {
                $("#Grid").data("kendoGrid").dataSource.read({ theDate1: selectedDate1, theDate2: selectedDate2, syearId: 0 });
            }
            else {
                MessageBoxAlert("Η αρχική ημερομηνία πρέπει να είναι μικρότερη της τελικής.")
            }
        }
        else {
            MessageBoxAlert("Πρέπει να επιλέξετε ημερομηνίες για προβολή του προγράμματος.")
        }
    }

    // this is used for fetching the data
    function data() {
        var syearID = $("#ddlschoolyear").data("kendoDropDownList").value();
        var datepicker1 = $("#datepicker1").data("kendoDatePicker");
        var datepicker2 = $("#datepicker2").data("kendoDatePicker");

        var selectedDate1 = datepicker1.value();
        var selectedDate2 = datepicker2.value();

        if (selectedDate1 && selectedDate2 && syearID) {
            return {
                theDate1: selectedDate1,
                theDate2: selectedDate2,
                syearId: syearID
            }
        }
        else {
            return {
                theDate1: null,
                theDate2: null,
                syearId: 0
            }
        }
    }

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGrid(e);
        }
    }

</script>

