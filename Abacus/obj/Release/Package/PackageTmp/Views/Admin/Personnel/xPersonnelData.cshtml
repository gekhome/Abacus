@using Abacus.DAL;
@using Abacus.Models;


@{
    ViewBag.Title = "Στοιχεία προσωπικού";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .k-grid {
        font-size: 12px;
    }
</style>


@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Στοιχεία προσωπικού και αναθέσεις παιδαγωγών</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid<PersonnelGridViewModel>()
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΜΗΤΡΩΟ).Width(14).Groupable(false);
            columns.Bound(c => c.ΕΠΩΝΥΜΟ).Width(32).Groupable(false);
            columns.Bound(c => c.ΟΝΟΜΑ).Width(30).Groupable(false);
            columns.ForeignKey(f => f.ΒΝΣ, (IEnumerable<ΣΥΣ_ΣΤΑΘΜΟΙ>)ViewData["stations"], "ΣΤΑΘΜΟΣ_ΚΩΔ", "ΕΠΩΝΥΜΙΑ").Width(30);
            columns.ForeignKey(f => f.ΠΡΟΣΩΠΙΚΟ_ΕΙΔΟΣ, (IEnumerable<ΣΥΣ_ΠΡΟΣΩΠΙΚΟ>)ViewData["person_types"], "PROSOPIKO_ID", "PROSOPIKO_TEXT").Width(20);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("xPersonnelEdit", "Admin") + "?personId=#=PERSONNEL_ID#' target = _blank><span class=\"k-icon k-edit\"></span>Καρτέλα</a>"
            ).Width(15);

        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Navigatable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Selectable()
        .Filterable()
        .HtmlAttributes(new { style = "display: block;font-size:11px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(300))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(40)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.PERSONNEL_ID);
            model.Field(p => p.ΒΝΣ).DefaultValue(ViewData["defaultStation"]);
            model.Field(p => p.ΠΡΟΣΩΠΙΚΟ_ΕΙΔΟΣ).DefaultValue(1);
        })
        .Create(create => create.Action("Personnel_Create", "Admin"))
        .Read(read => read.Action("Personnel_Read", "Admin"))
        .Update(update => update.Action("Personnel_Update", "Admin"))
        .Destroy(destroy => destroy.Action("Personnel_Destroy", "Admin"))
        .Events(events => events.Error("error_handler1"))
        )
        .Events(events => events.Change("change"))
        )
    </div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">

    @(Html.Kendo().PanelBar()
    .Name("Panel1")
    .Items(items =>
    {
        items.Add()
        .Text("Αναθέσεις τμημάτων (παιδαγωγοί)")
        .Selected(false)
        .Expanded(true)
        .Content(
        @<text>

        @(Html.Kendo().Grid<EducatorTmimaViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Navigatable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(220))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΣΧΟΛΙΚΟ_ΕΤΟΣ, (IEnumerable<ΣΥΣ_ΣΧΟΛΙΚΑ_ΕΤΗ>)ViewData["SchoolYears"], "SCHOOLYEAR_ID", "ΣΧΟΛΙΚΟ_ΕΤΟΣ").Width(16);
            columns.ForeignKey(f => f.ΤΜΗΜΑ_ΚΩΔ, (IEnumerable<ΤΜΗΜΑ>)ViewData["tmimata"], "ΤΜΗΜΑ_ΚΩΔ", "ΟΝΟΜΑΣΙΑ").Width(30).EditorTemplateName("AdminTmimaId");
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(32);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(20)
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.RECORD_ID);
                model.Field(p => p.ΣΧΟΛΙΚΟ_ΕΤΟΣ).DefaultValue(1);
                model.Field(p => p.ΤΜΗΜΑ_ΚΩΔ).DefaultValue((int)ViewData["defaultTmima"]);
            })
            .Create(create => create.Action("EducatorTmima_Create", "Admin").Data("data"))
            .Read(read => read.Action("EducatorTmima_Read", "Admin").Data("data"))
            .Update(update => update.Action("EducatorTmima_Update", "Admin").Data("data"))
            .Destroy(destroy => destroy.Action("EducatorTmima_Destroy", "Admin"))
            .Events(events => events.Error("error_handler2"))
        )
        )
        </text>);
    })
    )

</div>

<script type="text/javascript">

    var options = null;

    function RefreshGrid(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();
    }

    function filterTmimata() {
        var masterGrid = $("#Master").data("kendoGrid");
        var schoolyearID = $("#ΣΧΟΛΙΚΟ_ΕΤΟΣ").data("kendoDropDownList").value();
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem && schoolyearID) {
            return {
                schoolyearId: schoolyearID,
                stationId: dataItem.ΒΝΣ
            };
        }
        else {
            return { schoolyearId: 0, stationId: 0 };
        }
    }

    function change(e) {
        var dataItem = this.dataItem(this.select());
        var personID = dataItem.PERSONNEL_ID;

        $("#Child").data("kendoGrid").dataSource.read({ personId: personID });
        $("#Child").css("display", "block");
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { personId: dataItem.PERSONNEL_ID };
        }
        else {
            return { personId: 0 };
        }
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Master").data("kendoGrid").dataSource.read();
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
        }
        $("#Child").data("kendoGrid").dataSource.read();
    }

</script>

